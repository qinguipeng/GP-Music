{"version":3,"sources":["underscore-umd.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define('underscore', factory) :\r\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (function () {\r\n    var current = global._;\r\n    var exports = global._ = factory();\r\n    exports.noConflict = function () { global._ = current; return exports; };\r\n  }()));\r\n}(this, (function () {\r\n  //     Underscore.js 1.13.6\r\n  //     https://underscorejs.org\r\n  //     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors\r\n  //     Underscore may be freely distributed under the MIT license.\r\n\r\n  // Current version.\r\n  var VERSION = '1.13.6';\r\n\r\n  // Establish the root object, `window` (`self`) in the browser, `global`\r\n  // on the server, or `this` in some virtual machines. We use `self`\r\n  // instead of `window` for `WebWorker` support.\r\n  var root = (typeof self == 'object' && self.self === self && self) ||\r\n            (typeof global == 'object' && global.global === global && global) ||\r\n            Function('return this')() ||\r\n            {};\r\n\r\n  // Save bytes in the minified (but not gzipped) version:\r\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\r\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\r\n\r\n  // Create quick reference variables for speed access to core prototypes.\r\n  var push = ArrayProto.push,\r\n      slice = ArrayProto.slice,\r\n      toString = ObjProto.toString,\r\n      hasOwnProperty = ObjProto.hasOwnProperty;\r\n\r\n  // Modern feature detection.\r\n  var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',\r\n      supportsDataView = typeof DataView !== 'undefined';\r\n\r\n  // All **ECMAScript 5+** native function implementations that we hope to use\r\n  // are declared here.\r\n  var nativeIsArray = Array.isArray,\r\n      nativeKeys = Object.keys,\r\n      nativeCreate = Object.create,\r\n      nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;\r\n\r\n  // Create references to these builtin functions because we override them.\r\n  var _isNaN = isNaN,\r\n      _isFinite = isFinite;\r\n\r\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\r\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\r\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\r\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\r\n\r\n  // The largest integer that can be represented exactly.\r\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\r\n\r\n  // Some functions take a variable number of arguments, or a few expected\r\n  // arguments at the beginning and then a variable number of values to operate\r\n  // on. This helper accumulates all remaining arguments past the function’s\r\n  // argument length (or an explicit `startIndex`), into an array that becomes\r\n  // the last argument. Similar to ES6’s \"rest parameter\".\r\n  function restArguments(func, startIndex) {\r\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\r\n    return function() {\r\n      var length = Math.max(arguments.length - startIndex, 0),\r\n          rest = Array(length),\r\n          index = 0;\r\n      for (; index < length; index++) {\r\n        rest[index] = arguments[index + startIndex];\r\n      }\r\n      switch (startIndex) {\r\n        case 0: return func.call(this, rest);\r\n        case 1: return func.call(this, arguments[0], rest);\r\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\r\n      }\r\n      var args = Array(startIndex + 1);\r\n      for (index = 0; index < startIndex; index++) {\r\n        args[index] = arguments[index];\r\n      }\r\n      args[startIndex] = rest;\r\n      return func.apply(this, args);\r\n    };\r\n  }\r\n\r\n  // Is a given variable an object?\r\n  function isObject(obj) {\r\n    var type = typeof obj;\r\n    return type === 'function' || (type === 'object' && !!obj);\r\n  }\r\n\r\n  // Is a given value equal to null?\r\n  function isNull(obj) {\r\n    return obj === null;\r\n  }\r\n\r\n  // Is a given variable undefined?\r\n  function isUndefined(obj) {\r\n    return obj === void 0;\r\n  }\r\n\r\n  // Is a given value a boolean?\r\n  function isBoolean(obj) {\r\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\r\n  }\r\n\r\n  // Is a given value a DOM element?\r\n  function isElement(obj) {\r\n    return !!(obj && obj.nodeType === 1);\r\n  }\r\n\r\n  // Internal function for creating a `toString`-based type tester.\r\n  function tagTester(name) {\r\n    var tag = '[object ' + name + ']';\r\n    return function(obj) {\r\n      return toString.call(obj) === tag;\r\n    };\r\n  }\r\n\r\n  var isString = tagTester('String');\r\n\r\n  var isNumber = tagTester('Number');\r\n\r\n  var isDate = tagTester('Date');\r\n\r\n  var isRegExp = tagTester('RegExp');\r\n\r\n  var isError = tagTester('Error');\r\n\r\n  var isSymbol = tagTester('Symbol');\r\n\r\n  var isArrayBuffer = tagTester('ArrayBuffer');\r\n\r\n  var isFunction = tagTester('Function');\r\n\r\n  // Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old\r\n  // v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\r\n  var nodelist = root.document && root.document.childNodes;\r\n  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\r\n    isFunction = function(obj) {\r\n      return typeof obj == 'function' || false;\r\n    };\r\n  }\r\n\r\n  var isFunction$1 = isFunction;\r\n\r\n  var hasObjectTag = tagTester('Object');\r\n\r\n  // In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.\r\n  // In IE 11, the most common among them, this problem also applies to\r\n  // `Map`, `WeakMap` and `Set`.\r\n  var hasStringTagBug = (\r\n        supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))\r\n      ),\r\n      isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));\r\n\r\n  var isDataView = tagTester('DataView');\r\n\r\n  // In IE 10 - Edge 13, we need a different heuristic\r\n  // to determine whether an object is a `DataView`.\r\n  function ie10IsDataView(obj) {\r\n    return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);\r\n  }\r\n\r\n  var isDataView$1 = (hasStringTagBug ? ie10IsDataView : isDataView);\r\n\r\n  // Is a given value an array?\r\n  // Delegates to ECMA5's native `Array.isArray`.\r\n  var isArray = nativeIsArray || tagTester('Array');\r\n\r\n  // Internal function to check whether `key` is an own property name of `obj`.\r\n  function has$1(obj, key) {\r\n    return obj != null && hasOwnProperty.call(obj, key);\r\n  }\r\n\r\n  var isArguments = tagTester('Arguments');\r\n\r\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\r\n  // there isn't any inspectable \"Arguments\" type.\r\n  (function() {\r\n    if (!isArguments(arguments)) {\r\n      isArguments = function(obj) {\r\n        return has$1(obj, 'callee');\r\n      };\r\n    }\r\n  }());\r\n\r\n  var isArguments$1 = isArguments;\r\n\r\n  // Is a given object a finite number?\r\n  function isFinite$1(obj) {\r\n    return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));\r\n  }\r\n\r\n  // Is the given value `NaN`?\r\n  function isNaN$1(obj) {\r\n    return isNumber(obj) && _isNaN(obj);\r\n  }\r\n\r\n  // Predicate-generating function. Often useful outside of Underscore.\r\n  function constant(value) {\r\n    return function() {\r\n      return value;\r\n    };\r\n  }\r\n\r\n  // Common internal logic for `isArrayLike` and `isBufferLike`.\r\n  function createSizePropertyCheck(getSizeProperty) {\r\n    return function(collection) {\r\n      var sizeProperty = getSizeProperty(collection);\r\n      return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;\r\n    }\r\n  }\r\n\r\n  // Internal helper to generate a function to obtain property `key` from `obj`.\r\n  function shallowProperty(key) {\r\n    return function(obj) {\r\n      return obj == null ? void 0 : obj[key];\r\n    };\r\n  }\r\n\r\n  // Internal helper to obtain the `byteLength` property of an object.\r\n  var getByteLength = shallowProperty('byteLength');\r\n\r\n  // Internal helper to determine whether we should spend extensive checks against\r\n  // `ArrayBuffer` et al.\r\n  var isBufferLike = createSizePropertyCheck(getByteLength);\r\n\r\n  // Is a given value a typed array?\r\n  var typedArrayPattern = /\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;\r\n  function isTypedArray(obj) {\r\n    // `ArrayBuffer.isView` is the most future-proof, so use it when available.\r\n    // Otherwise, fall back on the above regular expression.\r\n    return nativeIsView ? (nativeIsView(obj) && !isDataView$1(obj)) :\r\n                  isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));\r\n  }\r\n\r\n  var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);\r\n\r\n  // Internal helper to obtain the `length` property of an object.\r\n  var getLength = shallowProperty('length');\r\n\r\n  // Internal helper to create a simple lookup structure.\r\n  // `collectNonEnumProps` used to depend on `_.contains`, but this led to\r\n  // circular imports. `emulatedSet` is a one-off solution that only works for\r\n  // arrays of strings.\r\n  function emulatedSet(keys) {\r\n    var hash = {};\r\n    for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;\r\n    return {\r\n      contains: function(key) { return hash[key] === true; },\r\n      push: function(key) {\r\n        hash[key] = true;\r\n        return keys.push(key);\r\n      }\r\n    };\r\n  }\r\n\r\n  // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't\r\n  // be iterated by `for key in ...` and thus missed. Extends `keys` in place if\r\n  // needed.\r\n  function collectNonEnumProps(obj, keys) {\r\n    keys = emulatedSet(keys);\r\n    var nonEnumIdx = nonEnumerableProps.length;\r\n    var constructor = obj.constructor;\r\n    var proto = (isFunction$1(constructor) && constructor.prototype) || ObjProto;\r\n\r\n    // Constructor is a special case.\r\n    var prop = 'constructor';\r\n    if (has$1(obj, prop) && !keys.contains(prop)) keys.push(prop);\r\n\r\n    while (nonEnumIdx--) {\r\n      prop = nonEnumerableProps[nonEnumIdx];\r\n      if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {\r\n        keys.push(prop);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Retrieve the names of an object's own properties.\r\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\r\n  function keys(obj) {\r\n    if (!isObject(obj)) return [];\r\n    if (nativeKeys) return nativeKeys(obj);\r\n    var keys = [];\r\n    for (var key in obj) if (has$1(obj, key)) keys.push(key);\r\n    // Ahem, IE < 9.\r\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\r\n    return keys;\r\n  }\r\n\r\n  // Is a given array, string, or object empty?\r\n  // An \"empty\" object has no enumerable own-properties.\r\n  function isEmpty(obj) {\r\n    if (obj == null) return true;\r\n    // Skip the more expensive `toString`-based type checks if `obj` has no\r\n    // `.length`.\r\n    var length = getLength(obj);\r\n    if (typeof length == 'number' && (\r\n      isArray(obj) || isString(obj) || isArguments$1(obj)\r\n    )) return length === 0;\r\n    return getLength(keys(obj)) === 0;\r\n  }\r\n\r\n  // Returns whether an object has a given set of `key:value` pairs.\r\n  function isMatch(object, attrs) {\r\n    var _keys = keys(attrs), length = _keys.length;\r\n    if (object == null) return !length;\r\n    var obj = Object(object);\r\n    for (var i = 0; i < length; i++) {\r\n      var key = _keys[i];\r\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // If Underscore is called as a function, it returns a wrapped object that can\r\n  // be used OO-style. This wrapper holds altered versions of all functions added\r\n  // through `_.mixin`. Wrapped objects may be chained.\r\n  function _$1(obj) {\r\n    if (obj instanceof _$1) return obj;\r\n    if (!(this instanceof _$1)) return new _$1(obj);\r\n    this._wrapped = obj;\r\n  }\r\n\r\n  _$1.VERSION = VERSION;\r\n\r\n  // Extracts the result from a wrapped and chained object.\r\n  _$1.prototype.value = function() {\r\n    return this._wrapped;\r\n  };\r\n\r\n  // Provide unwrapping proxies for some methods used in engine operations\r\n  // such as arithmetic and JSON stringification.\r\n  _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;\r\n\r\n  _$1.prototype.toString = function() {\r\n    return String(this._wrapped);\r\n  };\r\n\r\n  // Internal function to wrap or shallow-copy an ArrayBuffer,\r\n  // typed array or DataView to a new view, reusing the buffer.\r\n  function toBufferView(bufferSource) {\r\n    return new Uint8Array(\r\n      bufferSource.buffer || bufferSource,\r\n      bufferSource.byteOffset || 0,\r\n      getByteLength(bufferSource)\r\n    );\r\n  }\r\n\r\n  // We use this string twice, so give it a name for minification.\r\n  var tagDataView = '[object DataView]';\r\n\r\n  // Internal recursive comparison function for `_.isEqual`.\r\n  function eq(a, b, aStack, bStack) {\r\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\r\n    // `null` or `undefined` only equal to itself (strict comparison).\r\n    if (a == null || b == null) return false;\r\n    // `NaN`s are equivalent, but non-reflexive.\r\n    if (a !== a) return b !== b;\r\n    // Exhaust primitive checks\r\n    var type = typeof a;\r\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\r\n    return deepEq(a, b, aStack, bStack);\r\n  }\r\n\r\n  // Internal recursive comparison function for `_.isEqual`.\r\n  function deepEq(a, b, aStack, bStack) {\r\n    // Unwrap any wrapped objects.\r\n    if (a instanceof _$1) a = a._wrapped;\r\n    if (b instanceof _$1) b = b._wrapped;\r\n    // Compare `[[Class]]` names.\r\n    var className = toString.call(a);\r\n    if (className !== toString.call(b)) return false;\r\n    // Work around a bug in IE 10 - Edge 13.\r\n    if (hasStringTagBug && className == '[object Object]' && isDataView$1(a)) {\r\n      if (!isDataView$1(b)) return false;\r\n      className = tagDataView;\r\n    }\r\n    switch (className) {\r\n      // These types are compared by value.\r\n      case '[object RegExp]':\r\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\r\n      case '[object String]':\r\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n        // equivalent to `new String(\"5\")`.\r\n        return '' + a === '' + b;\r\n      case '[object Number]':\r\n        // `NaN`s are equivalent, but non-reflexive.\r\n        // Object(NaN) is equivalent to NaN.\r\n        if (+a !== +a) return +b !== +b;\r\n        // An `egal` comparison is performed for other numeric values.\r\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\r\n      case '[object Date]':\r\n      case '[object Boolean]':\r\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n        // millisecond representations. Note that invalid dates with millisecond representations\r\n        // of `NaN` are not equivalent.\r\n        return +a === +b;\r\n      case '[object Symbol]':\r\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\r\n      case '[object ArrayBuffer]':\r\n      case tagDataView:\r\n        // Coerce to typed array so we can fall through.\r\n        return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);\r\n    }\r\n\r\n    var areArrays = className === '[object Array]';\r\n    if (!areArrays && isTypedArray$1(a)) {\r\n        var byteLength = getByteLength(a);\r\n        if (byteLength !== getByteLength(b)) return false;\r\n        if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;\r\n        areArrays = true;\r\n    }\r\n    if (!areArrays) {\r\n      if (typeof a != 'object' || typeof b != 'object') return false;\r\n\r\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\r\n      // from different frames are.\r\n      var aCtor = a.constructor, bCtor = b.constructor;\r\n      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&\r\n                               isFunction$1(bCtor) && bCtor instanceof bCtor)\r\n                          && ('constructor' in a && 'constructor' in b)) {\r\n        return false;\r\n      }\r\n    }\r\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n\r\n    // Initializing stack of traversed objects.\r\n    // It's done here since we only need them for objects and arrays comparison.\r\n    aStack = aStack || [];\r\n    bStack = bStack || [];\r\n    var length = aStack.length;\r\n    while (length--) {\r\n      // Linear search. Performance is inversely proportional to the number of\r\n      // unique nested structures.\r\n      if (aStack[length] === a) return bStack[length] === b;\r\n    }\r\n\r\n    // Add the first object to the stack of traversed objects.\r\n    aStack.push(a);\r\n    bStack.push(b);\r\n\r\n    // Recursively compare objects and arrays.\r\n    if (areArrays) {\r\n      // Compare array lengths to determine if a deep comparison is necessary.\r\n      length = a.length;\r\n      if (length !== b.length) return false;\r\n      // Deep compare the contents, ignoring non-numeric properties.\r\n      while (length--) {\r\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\r\n      }\r\n    } else {\r\n      // Deep compare objects.\r\n      var _keys = keys(a), key;\r\n      length = _keys.length;\r\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\r\n      if (keys(b).length !== length) return false;\r\n      while (length--) {\r\n        // Deep compare each member\r\n        key = _keys[length];\r\n        if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\r\n      }\r\n    }\r\n    // Remove the first object from the stack of traversed objects.\r\n    aStack.pop();\r\n    bStack.pop();\r\n    return true;\r\n  }\r\n\r\n  // Perform a deep comparison to check if two objects are equal.\r\n  function isEqual(a, b) {\r\n    return eq(a, b);\r\n  }\r\n\r\n  // Retrieve all the enumerable property names of an object.\r\n  function allKeys(obj) {\r\n    if (!isObject(obj)) return [];\r\n    var keys = [];\r\n    for (var key in obj) keys.push(key);\r\n    // Ahem, IE < 9.\r\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\r\n    return keys;\r\n  }\r\n\r\n  // Since the regular `Object.prototype.toString` type tests don't work for\r\n  // some types in IE 11, we use a fingerprinting heuristic instead, based\r\n  // on the methods. It's not great, but it's the best we got.\r\n  // The fingerprint method lists are defined below.\r\n  function ie11fingerprint(methods) {\r\n    var length = getLength(methods);\r\n    return function(obj) {\r\n      if (obj == null) return false;\r\n      // `Map`, `WeakMap` and `Set` have no enumerable keys.\r\n      var keys = allKeys(obj);\r\n      if (getLength(keys)) return false;\r\n      for (var i = 0; i < length; i++) {\r\n        if (!isFunction$1(obj[methods[i]])) return false;\r\n      }\r\n      // If we are testing against `WeakMap`, we need to ensure that\r\n      // `obj` doesn't have a `forEach` method in order to distinguish\r\n      // it from a regular `Map`.\r\n      return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);\r\n    };\r\n  }\r\n\r\n  // In the interest of compact minification, we write\r\n  // each string in the fingerprints only once.\r\n  var forEachName = 'forEach',\r\n      hasName = 'has',\r\n      commonInit = ['clear', 'delete'],\r\n      mapTail = ['get', hasName, 'set'];\r\n\r\n  // `Map`, `WeakMap` and `Set` each have slightly different\r\n  // combinations of the above sublists.\r\n  var mapMethods = commonInit.concat(forEachName, mapTail),\r\n      weakMapMethods = commonInit.concat(mapTail),\r\n      setMethods = ['add'].concat(commonInit, forEachName, hasName);\r\n\r\n  var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');\r\n\r\n  var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');\r\n\r\n  var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');\r\n\r\n  var isWeakSet = tagTester('WeakSet');\r\n\r\n  // Retrieve the values of an object's properties.\r\n  function values(obj) {\r\n    var _keys = keys(obj);\r\n    var length = _keys.length;\r\n    var values = Array(length);\r\n    for (var i = 0; i < length; i++) {\r\n      values[i] = obj[_keys[i]];\r\n    }\r\n    return values;\r\n  }\r\n\r\n  // Convert an object into a list of `[key, value]` pairs.\r\n  // The opposite of `_.object` with one argument.\r\n  function pairs(obj) {\r\n    var _keys = keys(obj);\r\n    var length = _keys.length;\r\n    var pairs = Array(length);\r\n    for (var i = 0; i < length; i++) {\r\n      pairs[i] = [_keys[i], obj[_keys[i]]];\r\n    }\r\n    return pairs;\r\n  }\r\n\r\n  // Invert the keys and values of an object. The values must be serializable.\r\n  function invert(obj) {\r\n    var result = {};\r\n    var _keys = keys(obj);\r\n    for (var i = 0, length = _keys.length; i < length; i++) {\r\n      result[obj[_keys[i]]] = _keys[i];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Return a sorted list of the function names available on the object.\r\n  function functions(obj) {\r\n    var names = [];\r\n    for (var key in obj) {\r\n      if (isFunction$1(obj[key])) names.push(key);\r\n    }\r\n    return names.sort();\r\n  }\r\n\r\n  // An internal function for creating assigner functions.\r\n  function createAssigner(keysFunc, defaults) {\r\n    return function(obj) {\r\n      var length = arguments.length;\r\n      if (defaults) obj = Object(obj);\r\n      if (length < 2 || obj == null) return obj;\r\n      for (var index = 1; index < length; index++) {\r\n        var source = arguments[index],\r\n            keys = keysFunc(source),\r\n            l = keys.length;\r\n        for (var i = 0; i < l; i++) {\r\n          var key = keys[i];\r\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\r\n        }\r\n      }\r\n      return obj;\r\n    };\r\n  }\r\n\r\n  // Extend a given object with all the properties in passed-in object(s).\r\n  var extend = createAssigner(allKeys);\r\n\r\n  // Assigns a given object with all the own properties in the passed-in\r\n  // object(s).\r\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\r\n  var extendOwn = createAssigner(keys);\r\n\r\n  // Fill in a given object with default properties.\r\n  var defaults = createAssigner(allKeys, true);\r\n\r\n  // Create a naked function reference for surrogate-prototype-swapping.\r\n  function ctor() {\r\n    return function(){};\r\n  }\r\n\r\n  // An internal function for creating a new object that inherits from another.\r\n  function baseCreate(prototype) {\r\n    if (!isObject(prototype)) return {};\r\n    if (nativeCreate) return nativeCreate(prototype);\r\n    var Ctor = ctor();\r\n    Ctor.prototype = prototype;\r\n    var result = new Ctor;\r\n    Ctor.prototype = null;\r\n    return result;\r\n  }\r\n\r\n  // Creates an object that inherits from the given prototype object.\r\n  // If additional properties are provided then they will be added to the\r\n  // created object.\r\n  function create(prototype, props) {\r\n    var result = baseCreate(prototype);\r\n    if (props) extendOwn(result, props);\r\n    return result;\r\n  }\r\n\r\n  // Create a (shallow-cloned) duplicate of an object.\r\n  function clone(obj) {\r\n    if (!isObject(obj)) return obj;\r\n    return isArray(obj) ? obj.slice() : extend({}, obj);\r\n  }\r\n\r\n  // Invokes `interceptor` with the `obj` and then returns `obj`.\r\n  // The primary purpose of this method is to \"tap into\" a method chain, in\r\n  // order to perform operations on intermediate results within the chain.\r\n  function tap(obj, interceptor) {\r\n    interceptor(obj);\r\n    return obj;\r\n  }\r\n\r\n  // Normalize a (deep) property `path` to array.\r\n  // Like `_.iteratee`, this function can be customized.\r\n  function toPath$1(path) {\r\n    return isArray(path) ? path : [path];\r\n  }\r\n  _$1.toPath = toPath$1;\r\n\r\n  // Internal wrapper for `_.toPath` to enable minification.\r\n  // Similar to `cb` for `_.iteratee`.\r\n  function toPath(path) {\r\n    return _$1.toPath(path);\r\n  }\r\n\r\n  // Internal function to obtain a nested property in `obj` along `path`.\r\n  function deepGet(obj, path) {\r\n    var length = path.length;\r\n    for (var i = 0; i < length; i++) {\r\n      if (obj == null) return void 0;\r\n      obj = obj[path[i]];\r\n    }\r\n    return length ? obj : void 0;\r\n  }\r\n\r\n  // Get the value of the (deep) property on `path` from `object`.\r\n  // If any property in `path` does not exist or if the value is\r\n  // `undefined`, return `defaultValue` instead.\r\n  // The `path` is normalized through `_.toPath`.\r\n  function get(object, path, defaultValue) {\r\n    var value = deepGet(object, toPath(path));\r\n    return isUndefined(value) ? defaultValue : value;\r\n  }\r\n\r\n  // Shortcut function for checking if an object has a given property directly on\r\n  // itself (in other words, not on a prototype). Unlike the internal `has`\r\n  // function, this public version can also traverse nested properties.\r\n  function has(obj, path) {\r\n    path = toPath(path);\r\n    var length = path.length;\r\n    for (var i = 0; i < length; i++) {\r\n      var key = path[i];\r\n      if (!has$1(obj, key)) return false;\r\n      obj = obj[key];\r\n    }\r\n    return !!length;\r\n  }\r\n\r\n  // Keep the identity function around for default iteratees.\r\n  function identity(value) {\r\n    return value;\r\n  }\r\n\r\n  // Returns a predicate for checking whether an object has a given set of\r\n  // `key:value` pairs.\r\n  function matcher(attrs) {\r\n    attrs = extendOwn({}, attrs);\r\n    return function(obj) {\r\n      return isMatch(obj, attrs);\r\n    };\r\n  }\r\n\r\n  // Creates a function that, when passed an object, will traverse that object’s\r\n  // properties down the given `path`, specified as an array of keys or indices.\r\n  function property(path) {\r\n    path = toPath(path);\r\n    return function(obj) {\r\n      return deepGet(obj, path);\r\n    };\r\n  }\r\n\r\n  // Internal function that returns an efficient (for current engines) version\r\n  // of the passed-in callback, to be repeatedly applied in other Underscore\r\n  // functions.\r\n  function optimizeCb(func, context, argCount) {\r\n    if (context === void 0) return func;\r\n    switch (argCount == null ? 3 : argCount) {\r\n      case 1: return function(value) {\r\n        return func.call(context, value);\r\n      };\r\n      // The 2-argument case is omitted because we’re not using it.\r\n      case 3: return function(value, index, collection) {\r\n        return func.call(context, value, index, collection);\r\n      };\r\n      case 4: return function(accumulator, value, index, collection) {\r\n        return func.call(context, accumulator, value, index, collection);\r\n      };\r\n    }\r\n    return function() {\r\n      return func.apply(context, arguments);\r\n    };\r\n  }\r\n\r\n  // An internal function to generate callbacks that can be applied to each\r\n  // element in a collection, returning the desired result — either `_.identity`,\r\n  // an arbitrary callback, a property matcher, or a property accessor.\r\n  function baseIteratee(value, context, argCount) {\r\n    if (value == null) return identity;\r\n    if (isFunction$1(value)) return optimizeCb(value, context, argCount);\r\n    if (isObject(value) && !isArray(value)) return matcher(value);\r\n    return property(value);\r\n  }\r\n\r\n  // External wrapper for our callback generator. Users may customize\r\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\r\n  // This abstraction hides the internal-only `argCount` argument.\r\n  function iteratee(value, context) {\r\n    return baseIteratee(value, context, Infinity);\r\n  }\r\n  _$1.iteratee = iteratee;\r\n\r\n  // The function we call internally to generate a callback. It invokes\r\n  // `_.iteratee` if overridden, otherwise `baseIteratee`.\r\n  function cb(value, context, argCount) {\r\n    if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);\r\n    return baseIteratee(value, context, argCount);\r\n  }\r\n\r\n  // Returns the results of applying the `iteratee` to each element of `obj`.\r\n  // In contrast to `_.map` it returns an object.\r\n  function mapObject(obj, iteratee, context) {\r\n    iteratee = cb(iteratee, context);\r\n    var _keys = keys(obj),\r\n        length = _keys.length,\r\n        results = {};\r\n    for (var index = 0; index < length; index++) {\r\n      var currentKey = _keys[index];\r\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\r\n    }\r\n    return results;\r\n  }\r\n\r\n  // Predicate-generating function. Often useful outside of Underscore.\r\n  function noop(){}\r\n\r\n  // Generates a function for a given object that returns a given property.\r\n  function propertyOf(obj) {\r\n    if (obj == null) return noop;\r\n    return function(path) {\r\n      return get(obj, path);\r\n    };\r\n  }\r\n\r\n  // Run a function **n** times.\r\n  function times(n, iteratee, context) {\r\n    var accum = Array(Math.max(0, n));\r\n    iteratee = optimizeCb(iteratee, context, 1);\r\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\r\n    return accum;\r\n  }\r\n\r\n  // Return a random integer between `min` and `max` (inclusive).\r\n  function random(min, max) {\r\n    if (max == null) {\r\n      max = min;\r\n      min = 0;\r\n    }\r\n    return min + Math.floor(Math.random() * (max - min + 1));\r\n  }\r\n\r\n  // A (possibly faster) way to get the current timestamp as an integer.\r\n  var now = Date.now || function() {\r\n    return new Date().getTime();\r\n  };\r\n\r\n  // Internal helper to generate functions for escaping and unescaping strings\r\n  // to/from HTML interpolation.\r\n  function createEscaper(map) {\r\n    var escaper = function(match) {\r\n      return map[match];\r\n    };\r\n    // Regexes for identifying a key that needs to be escaped.\r\n    var source = '(?:' + keys(map).join('|') + ')';\r\n    var testRegexp = RegExp(source);\r\n    var replaceRegexp = RegExp(source, 'g');\r\n    return function(string) {\r\n      string = string == null ? '' : '' + string;\r\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\r\n    };\r\n  }\r\n\r\n  // Internal list of HTML entities for escaping.\r\n  var escapeMap = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#x27;',\r\n    '`': '&#x60;'\r\n  };\r\n\r\n  // Function for escaping strings to HTML interpolation.\r\n  var _escape = createEscaper(escapeMap);\r\n\r\n  // Internal list of HTML entities for unescaping.\r\n  var unescapeMap = invert(escapeMap);\r\n\r\n  // Function for unescaping strings from HTML interpolation.\r\n  var _unescape = createEscaper(unescapeMap);\r\n\r\n  // By default, Underscore uses ERB-style template delimiters. Change the\r\n  // following template settings to use alternative delimiters.\r\n  var templateSettings = _$1.templateSettings = {\r\n    evaluate: /<%([\\s\\S]+?)%>/g,\r\n    interpolate: /<%=([\\s\\S]+?)%>/g,\r\n    escape: /<%-([\\s\\S]+?)%>/g\r\n  };\r\n\r\n  // When customizing `_.templateSettings`, if you don't want to define an\r\n  // interpolation, evaluation or escaping regex, we need one that is\r\n  // guaranteed not to match.\r\n  var noMatch = /(.)^/;\r\n\r\n  // Certain characters need to be escaped so that they can be put into a\r\n  // string literal.\r\n  var escapes = {\r\n    \"'\": \"'\",\r\n    '\\\\': '\\\\',\r\n    '\\r': 'r',\r\n    '\\n': 'n',\r\n    '\\u2028': 'u2028',\r\n    '\\u2029': 'u2029'\r\n  };\r\n\r\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\r\n\r\n  function escapeChar(match) {\r\n    return '\\\\' + escapes[match];\r\n  }\r\n\r\n  // In order to prevent third-party code injection through\r\n  // `_.templateSettings.variable`, we test it against the following regular\r\n  // expression. It is intentionally a bit more liberal than just matching valid\r\n  // identifiers, but still prevents possible loopholes through defaults or\r\n  // destructuring assignment.\r\n  var bareIdentifier = /^\\s*(\\w|\\$)+\\s*$/;\r\n\r\n  // JavaScript micro-templating, similar to John Resig's implementation.\r\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\r\n  // and correctly escapes quotes within interpolated code.\r\n  // NB: `oldSettings` only exists for backwards compatibility.\r\n  function template(text, settings, oldSettings) {\r\n    if (!settings && oldSettings) settings = oldSettings;\r\n    settings = defaults({}, settings, _$1.templateSettings);\r\n\r\n    // Combine delimiters into one regular expression via alternation.\r\n    var matcher = RegExp([\r\n      (settings.escape || noMatch).source,\r\n      (settings.interpolate || noMatch).source,\r\n      (settings.evaluate || noMatch).source\r\n    ].join('|') + '|$', 'g');\r\n\r\n    // Compile the template source, escaping string literals appropriately.\r\n    var index = 0;\r\n    var source = \"__p+='\";\r\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\r\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\r\n      index = offset + match.length;\r\n\r\n      if (escape) {\r\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\r\n      } else if (interpolate) {\r\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\r\n      } else if (evaluate) {\r\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\r\n      }\r\n\r\n      // Adobe VMs need the match returned to produce the correct offset.\r\n      return match;\r\n    });\r\n    source += \"';\\n\";\r\n\r\n    var argument = settings.variable;\r\n    if (argument) {\r\n      // Insure against third-party code injection. (CVE-2021-23358)\r\n      if (!bareIdentifier.test(argument)) throw new Error(\r\n        'variable is not a bare identifier: ' + argument\r\n      );\r\n    } else {\r\n      // If a variable is not specified, place data values in local scope.\r\n      source = 'with(obj||{}){\\n' + source + '}\\n';\r\n      argument = 'obj';\r\n    }\r\n\r\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\r\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\r\n      source + 'return __p;\\n';\r\n\r\n    var render;\r\n    try {\r\n      render = new Function(argument, '_', source);\r\n    } catch (e) {\r\n      e.source = source;\r\n      throw e;\r\n    }\r\n\r\n    var template = function(data) {\r\n      return render.call(this, data, _$1);\r\n    };\r\n\r\n    // Provide the compiled source as a convenience for precompilation.\r\n    template.source = 'function(' + argument + '){\\n' + source + '}';\r\n\r\n    return template;\r\n  }\r\n\r\n  // Traverses the children of `obj` along `path`. If a child is a function, it\r\n  // is invoked with its parent as context. Returns the value of the final\r\n  // child, or `fallback` if any child is undefined.\r\n  function result(obj, path, fallback) {\r\n    path = toPath(path);\r\n    var length = path.length;\r\n    if (!length) {\r\n      return isFunction$1(fallback) ? fallback.call(obj) : fallback;\r\n    }\r\n    for (var i = 0; i < length; i++) {\r\n      var prop = obj == null ? void 0 : obj[path[i]];\r\n      if (prop === void 0) {\r\n        prop = fallback;\r\n        i = length; // Ensure we don't continue iterating.\r\n      }\r\n      obj = isFunction$1(prop) ? prop.call(obj) : prop;\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  // Generate a unique integer id (unique within the entire client session).\r\n  // Useful for temporary DOM ids.\r\n  var idCounter = 0;\r\n  function uniqueId(prefix) {\r\n    var id = ++idCounter + '';\r\n    return prefix ? prefix + id : id;\r\n  }\r\n\r\n  // Start chaining a wrapped Underscore object.\r\n  function chain(obj) {\r\n    var instance = _$1(obj);\r\n    instance._chain = true;\r\n    return instance;\r\n  }\r\n\r\n  // Internal function to execute `sourceFunc` bound to `context` with optional\r\n  // `args`. Determines whether to execute a function as a constructor or as a\r\n  // normal function.\r\n  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {\r\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\r\n    var self = baseCreate(sourceFunc.prototype);\r\n    var result = sourceFunc.apply(self, args);\r\n    if (isObject(result)) return result;\r\n    return self;\r\n  }\r\n\r\n  // Partially apply a function by creating a version that has had some of its\r\n  // arguments pre-filled, without changing its dynamic `this` context. `_` acts\r\n  // as a placeholder by default, allowing any combination of arguments to be\r\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\r\n  var partial = restArguments(function(func, boundArgs) {\r\n    var placeholder = partial.placeholder;\r\n    var bound = function() {\r\n      var position = 0, length = boundArgs.length;\r\n      var args = Array(length);\r\n      for (var i = 0; i < length; i++) {\r\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\r\n      }\r\n      while (position < arguments.length) args.push(arguments[position++]);\r\n      return executeBound(func, bound, this, this, args);\r\n    };\r\n    return bound;\r\n  });\r\n\r\n  partial.placeholder = _$1;\r\n\r\n  // Create a function bound to a given object (assigning `this`, and arguments,\r\n  // optionally).\r\n  var bind = restArguments(function(func, context, args) {\r\n    if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');\r\n    var bound = restArguments(function(callArgs) {\r\n      return executeBound(func, bound, context, this, args.concat(callArgs));\r\n    });\r\n    return bound;\r\n  });\r\n\r\n  // Internal helper for collection methods to determine whether a collection\r\n  // should be iterated as an array or as an object.\r\n  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\r\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\r\n  var isArrayLike = createSizePropertyCheck(getLength);\r\n\r\n  // Internal implementation of a recursive `flatten` function.\r\n  function flatten$1(input, depth, strict, output) {\r\n    output = output || [];\r\n    if (!depth && depth !== 0) {\r\n      depth = Infinity;\r\n    } else if (depth <= 0) {\r\n      return output.concat(input);\r\n    }\r\n    var idx = output.length;\r\n    for (var i = 0, length = getLength(input); i < length; i++) {\r\n      var value = input[i];\r\n      if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {\r\n        // Flatten current level of array or arguments object.\r\n        if (depth > 1) {\r\n          flatten$1(value, depth - 1, strict, output);\r\n          idx = output.length;\r\n        } else {\r\n          var j = 0, len = value.length;\r\n          while (j < len) output[idx++] = value[j++];\r\n        }\r\n      } else if (!strict) {\r\n        output[idx++] = value;\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n\r\n  // Bind a number of an object's methods to that object. Remaining arguments\r\n  // are the method names to be bound. Useful for ensuring that all callbacks\r\n  // defined on an object belong to it.\r\n  var bindAll = restArguments(function(obj, keys) {\r\n    keys = flatten$1(keys, false, false);\r\n    var index = keys.length;\r\n    if (index < 1) throw new Error('bindAll must be passed function names');\r\n    while (index--) {\r\n      var key = keys[index];\r\n      obj[key] = bind(obj[key], obj);\r\n    }\r\n    return obj;\r\n  });\r\n\r\n  // Memoize an expensive function by storing its results.\r\n  function memoize(func, hasher) {\r\n    var memoize = function(key) {\r\n      var cache = memoize.cache;\r\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\r\n      if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);\r\n      return cache[address];\r\n    };\r\n    memoize.cache = {};\r\n    return memoize;\r\n  }\r\n\r\n  // Delays a function for the given number of milliseconds, and then calls\r\n  // it with the arguments supplied.\r\n  var delay = restArguments(function(func, wait, args) {\r\n    return setTimeout(function() {\r\n      return func.apply(null, args);\r\n    }, wait);\r\n  });\r\n\r\n  // Defers a function, scheduling it to run after the current call stack has\r\n  // cleared.\r\n  var defer = partial(delay, _$1, 1);\r\n\r\n  // Returns a function, that, when invoked, will only be triggered at most once\r\n  // during a given window of time. Normally, the throttled function will run\r\n  // as much as it can, without ever going more than once per `wait` duration;\r\n  // but if you'd like to disable the execution on the leading edge, pass\r\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\r\n  function throttle(func, wait, options) {\r\n    var timeout, context, args, result;\r\n    var previous = 0;\r\n    if (!options) options = {};\r\n\r\n    var later = function() {\r\n      previous = options.leading === false ? 0 : now();\r\n      timeout = null;\r\n      result = func.apply(context, args);\r\n      if (!timeout) context = args = null;\r\n    };\r\n\r\n    var throttled = function() {\r\n      var _now = now();\r\n      if (!previous && options.leading === false) previous = _now;\r\n      var remaining = wait - (_now - previous);\r\n      context = this;\r\n      args = arguments;\r\n      if (remaining <= 0 || remaining > wait) {\r\n        if (timeout) {\r\n          clearTimeout(timeout);\r\n          timeout = null;\r\n        }\r\n        previous = _now;\r\n        result = func.apply(context, args);\r\n        if (!timeout) context = args = null;\r\n      } else if (!timeout && options.trailing !== false) {\r\n        timeout = setTimeout(later, remaining);\r\n      }\r\n      return result;\r\n    };\r\n\r\n    throttled.cancel = function() {\r\n      clearTimeout(timeout);\r\n      previous = 0;\r\n      timeout = context = args = null;\r\n    };\r\n\r\n    return throttled;\r\n  }\r\n\r\n  // When a sequence of calls of the returned function ends, the argument\r\n  // function is triggered. The end of a sequence is defined by the `wait`\r\n  // parameter. If `immediate` is passed, the argument function will be\r\n  // triggered at the beginning of the sequence instead of at the end.\r\n  function debounce(func, wait, immediate) {\r\n    var timeout, previous, args, result, context;\r\n\r\n    var later = function() {\r\n      var passed = now() - previous;\r\n      if (wait > passed) {\r\n        timeout = setTimeout(later, wait - passed);\r\n      } else {\r\n        timeout = null;\r\n        if (!immediate) result = func.apply(context, args);\r\n        // This check is needed because `func` can recursively invoke `debounced`.\r\n        if (!timeout) args = context = null;\r\n      }\r\n    };\r\n\r\n    var debounced = restArguments(function(_args) {\r\n      context = this;\r\n      args = _args;\r\n      previous = now();\r\n      if (!timeout) {\r\n        timeout = setTimeout(later, wait);\r\n        if (immediate) result = func.apply(context, args);\r\n      }\r\n      return result;\r\n    });\r\n\r\n    debounced.cancel = function() {\r\n      clearTimeout(timeout);\r\n      timeout = args = context = null;\r\n    };\r\n\r\n    return debounced;\r\n  }\r\n\r\n  // Returns the first function passed as an argument to the second,\r\n  // allowing you to adjust arguments, run code before and after, and\r\n  // conditionally execute the original function.\r\n  function wrap(func, wrapper) {\r\n    return partial(wrapper, func);\r\n  }\r\n\r\n  // Returns a negated version of the passed-in predicate.\r\n  function negate(predicate) {\r\n    return function() {\r\n      return !predicate.apply(this, arguments);\r\n    };\r\n  }\r\n\r\n  // Returns a function that is the composition of a list of functions, each\r\n  // consuming the return value of the function that follows.\r\n  function compose() {\r\n    var args = arguments;\r\n    var start = args.length - 1;\r\n    return function() {\r\n      var i = start;\r\n      var result = args[start].apply(this, arguments);\r\n      while (i--) result = args[i].call(this, result);\r\n      return result;\r\n    };\r\n  }\r\n\r\n  // Returns a function that will only be executed on and after the Nth call.\r\n  function after(times, func) {\r\n    return function() {\r\n      if (--times < 1) {\r\n        return func.apply(this, arguments);\r\n      }\r\n    };\r\n  }\r\n\r\n  // Returns a function that will only be executed up to (but not including) the\r\n  // Nth call.\r\n  function before(times, func) {\r\n    var memo;\r\n    return function() {\r\n      if (--times > 0) {\r\n        memo = func.apply(this, arguments);\r\n      }\r\n      if (times <= 1) func = null;\r\n      return memo;\r\n    };\r\n  }\r\n\r\n  // Returns a function that will be executed at most one time, no matter how\r\n  // often you call it. Useful for lazy initialization.\r\n  var once = partial(before, 2);\r\n\r\n  // Returns the first key on an object that passes a truth test.\r\n  function findKey(obj, predicate, context) {\r\n    predicate = cb(predicate, context);\r\n    var _keys = keys(obj), key;\r\n    for (var i = 0, length = _keys.length; i < length; i++) {\r\n      key = _keys[i];\r\n      if (predicate(obj[key], key, obj)) return key;\r\n    }\r\n  }\r\n\r\n  // Internal function to generate `_.findIndex` and `_.findLastIndex`.\r\n  function createPredicateIndexFinder(dir) {\r\n    return function(array, predicate, context) {\r\n      predicate = cb(predicate, context);\r\n      var length = getLength(array);\r\n      var index = dir > 0 ? 0 : length - 1;\r\n      for (; index >= 0 && index < length; index += dir) {\r\n        if (predicate(array[index], index, array)) return index;\r\n      }\r\n      return -1;\r\n    };\r\n  }\r\n\r\n  // Returns the first index on an array-like that passes a truth test.\r\n  var findIndex = createPredicateIndexFinder(1);\r\n\r\n  // Returns the last index on an array-like that passes a truth test.\r\n  var findLastIndex = createPredicateIndexFinder(-1);\r\n\r\n  // Use a comparator function to figure out the smallest index at which\r\n  // an object should be inserted so as to maintain order. Uses binary search.\r\n  function sortedIndex(array, obj, iteratee, context) {\r\n    iteratee = cb(iteratee, context, 1);\r\n    var value = iteratee(obj);\r\n    var low = 0, high = getLength(array);\r\n    while (low < high) {\r\n      var mid = Math.floor((low + high) / 2);\r\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\r\n    }\r\n    return low;\r\n  }\r\n\r\n  // Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.\r\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\r\n    return function(array, item, idx) {\r\n      var i = 0, length = getLength(array);\r\n      if (typeof idx == 'number') {\r\n        if (dir > 0) {\r\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\r\n        } else {\r\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\r\n        }\r\n      } else if (sortedIndex && idx && length) {\r\n        idx = sortedIndex(array, item);\r\n        return array[idx] === item ? idx : -1;\r\n      }\r\n      if (item !== item) {\r\n        idx = predicateFind(slice.call(array, i, length), isNaN$1);\r\n        return idx >= 0 ? idx + i : -1;\r\n      }\r\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\r\n        if (array[idx] === item) return idx;\r\n      }\r\n      return -1;\r\n    };\r\n  }\r\n\r\n  // Return the position of the first occurrence of an item in an array,\r\n  // or -1 if the item is not included in the array.\r\n  // If the array is large and already in sort order, pass `true`\r\n  // for **isSorted** to use binary search.\r\n  var indexOf = createIndexFinder(1, findIndex, sortedIndex);\r\n\r\n  // Return the position of the last occurrence of an item in an array,\r\n  // or -1 if the item is not included in the array.\r\n  var lastIndexOf = createIndexFinder(-1, findLastIndex);\r\n\r\n  // Return the first value which passes a truth test.\r\n  function find(obj, predicate, context) {\r\n    var keyFinder = isArrayLike(obj) ? findIndex : findKey;\r\n    var key = keyFinder(obj, predicate, context);\r\n    if (key !== void 0 && key !== -1) return obj[key];\r\n  }\r\n\r\n  // Convenience version of a common use case of `_.find`: getting the first\r\n  // object containing specific `key:value` pairs.\r\n  function findWhere(obj, attrs) {\r\n    return find(obj, matcher(attrs));\r\n  }\r\n\r\n  // The cornerstone for collection functions, an `each`\r\n  // implementation, aka `forEach`.\r\n  // Handles raw objects in addition to array-likes. Treats all\r\n  // sparse array-likes as if they were dense.\r\n  function each(obj, iteratee, context) {\r\n    iteratee = optimizeCb(iteratee, context);\r\n    var i, length;\r\n    if (isArrayLike(obj)) {\r\n      for (i = 0, length = obj.length; i < length; i++) {\r\n        iteratee(obj[i], i, obj);\r\n      }\r\n    } else {\r\n      var _keys = keys(obj);\r\n      for (i = 0, length = _keys.length; i < length; i++) {\r\n        iteratee(obj[_keys[i]], _keys[i], obj);\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  // Return the results of applying the iteratee to each element.\r\n  function map(obj, iteratee, context) {\r\n    iteratee = cb(iteratee, context);\r\n    var _keys = !isArrayLike(obj) && keys(obj),\r\n        length = (_keys || obj).length,\r\n        results = Array(length);\r\n    for (var index = 0; index < length; index++) {\r\n      var currentKey = _keys ? _keys[index] : index;\r\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\r\n    }\r\n    return results;\r\n  }\r\n\r\n  // Internal helper to create a reducing function, iterating left or right.\r\n  function createReduce(dir) {\r\n    // Wrap code that reassigns argument variables in a separate function than\r\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\r\n    var reducer = function(obj, iteratee, memo, initial) {\r\n      var _keys = !isArrayLike(obj) && keys(obj),\r\n          length = (_keys || obj).length,\r\n          index = dir > 0 ? 0 : length - 1;\r\n      if (!initial) {\r\n        memo = obj[_keys ? _keys[index] : index];\r\n        index += dir;\r\n      }\r\n      for (; index >= 0 && index < length; index += dir) {\r\n        var currentKey = _keys ? _keys[index] : index;\r\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\r\n      }\r\n      return memo;\r\n    };\r\n\r\n    return function(obj, iteratee, memo, context) {\r\n      var initial = arguments.length >= 3;\r\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\r\n    };\r\n  }\r\n\r\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\r\n  // or `foldl`.\r\n  var reduce = createReduce(1);\r\n\r\n  // The right-associative version of reduce, also known as `foldr`.\r\n  var reduceRight = createReduce(-1);\r\n\r\n  // Return all the elements that pass a truth test.\r\n  function filter(obj, predicate, context) {\r\n    var results = [];\r\n    predicate = cb(predicate, context);\r\n    each(obj, function(value, index, list) {\r\n      if (predicate(value, index, list)) results.push(value);\r\n    });\r\n    return results;\r\n  }\r\n\r\n  // Return all the elements for which a truth test fails.\r\n  function reject(obj, predicate, context) {\r\n    return filter(obj, negate(cb(predicate)), context);\r\n  }\r\n\r\n  // Determine whether all of the elements pass a truth test.\r\n  function every(obj, predicate, context) {\r\n    predicate = cb(predicate, context);\r\n    var _keys = !isArrayLike(obj) && keys(obj),\r\n        length = (_keys || obj).length;\r\n    for (var index = 0; index < length; index++) {\r\n      var currentKey = _keys ? _keys[index] : index;\r\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // Determine if at least one element in the object passes a truth test.\r\n  function some(obj, predicate, context) {\r\n    predicate = cb(predicate, context);\r\n    var _keys = !isArrayLike(obj) && keys(obj),\r\n        length = (_keys || obj).length;\r\n    for (var index = 0; index < length; index++) {\r\n      var currentKey = _keys ? _keys[index] : index;\r\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Determine if the array or object contains a given item (using `===`).\r\n  function contains(obj, item, fromIndex, guard) {\r\n    if (!isArrayLike(obj)) obj = values(obj);\r\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\r\n    return indexOf(obj, item, fromIndex) >= 0;\r\n  }\r\n\r\n  // Invoke a method (with arguments) on every item in a collection.\r\n  var invoke = restArguments(function(obj, path, args) {\r\n    var contextPath, func;\r\n    if (isFunction$1(path)) {\r\n      func = path;\r\n    } else {\r\n      path = toPath(path);\r\n      contextPath = path.slice(0, -1);\r\n      path = path[path.length - 1];\r\n    }\r\n    return map(obj, function(context) {\r\n      var method = func;\r\n      if (!method) {\r\n        if (contextPath && contextPath.length) {\r\n          context = deepGet(context, contextPath);\r\n        }\r\n        if (context == null) return void 0;\r\n        method = context[path];\r\n      }\r\n      return method == null ? method : method.apply(context, args);\r\n    });\r\n  });\r\n\r\n  // Convenience version of a common use case of `_.map`: fetching a property.\r\n  function pluck(obj, key) {\r\n    return map(obj, property(key));\r\n  }\r\n\r\n  // Convenience version of a common use case of `_.filter`: selecting only\r\n  // objects containing specific `key:value` pairs.\r\n  function where(obj, attrs) {\r\n    return filter(obj, matcher(attrs));\r\n  }\r\n\r\n  // Return the maximum element (or element-based computation).\r\n  function max(obj, iteratee, context) {\r\n    var result = -Infinity, lastComputed = -Infinity,\r\n        value, computed;\r\n    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {\r\n      obj = isArrayLike(obj) ? obj : values(obj);\r\n      for (var i = 0, length = obj.length; i < length; i++) {\r\n        value = obj[i];\r\n        if (value != null && value > result) {\r\n          result = value;\r\n        }\r\n      }\r\n    } else {\r\n      iteratee = cb(iteratee, context);\r\n      each(obj, function(v, index, list) {\r\n        computed = iteratee(v, index, list);\r\n        if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {\r\n          result = v;\r\n          lastComputed = computed;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Return the minimum element (or element-based computation).\r\n  function min(obj, iteratee, context) {\r\n    var result = Infinity, lastComputed = Infinity,\r\n        value, computed;\r\n    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {\r\n      obj = isArrayLike(obj) ? obj : values(obj);\r\n      for (var i = 0, length = obj.length; i < length; i++) {\r\n        value = obj[i];\r\n        if (value != null && value < result) {\r\n          result = value;\r\n        }\r\n      }\r\n    } else {\r\n      iteratee = cb(iteratee, context);\r\n      each(obj, function(v, index, list) {\r\n        computed = iteratee(v, index, list);\r\n        if (computed < lastComputed || (computed === Infinity && result === Infinity)) {\r\n          result = v;\r\n          lastComputed = computed;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Safely create a real, live array from anything iterable.\r\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\r\n  function toArray(obj) {\r\n    if (!obj) return [];\r\n    if (isArray(obj)) return slice.call(obj);\r\n    if (isString(obj)) {\r\n      // Keep surrogate pair characters together.\r\n      return obj.match(reStrSymbol);\r\n    }\r\n    if (isArrayLike(obj)) return map(obj, identity);\r\n    return values(obj);\r\n  }\r\n\r\n  // Sample **n** random values from a collection using the modern version of the\r\n  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\r\n  // If **n** is not specified, returns a single random element.\r\n  // The internal `guard` argument allows it to work with `_.map`.\r\n  function sample(obj, n, guard) {\r\n    if (n == null || guard) {\r\n      if (!isArrayLike(obj)) obj = values(obj);\r\n      return obj[random(obj.length - 1)];\r\n    }\r\n    var sample = toArray(obj);\r\n    var length = getLength(sample);\r\n    n = Math.max(Math.min(n, length), 0);\r\n    var last = length - 1;\r\n    for (var index = 0; index < n; index++) {\r\n      var rand = random(index, last);\r\n      var temp = sample[index];\r\n      sample[index] = sample[rand];\r\n      sample[rand] = temp;\r\n    }\r\n    return sample.slice(0, n);\r\n  }\r\n\r\n  // Shuffle a collection.\r\n  function shuffle(obj) {\r\n    return sample(obj, Infinity);\r\n  }\r\n\r\n  // Sort the object's values by a criterion produced by an iteratee.\r\n  function sortBy(obj, iteratee, context) {\r\n    var index = 0;\r\n    iteratee = cb(iteratee, context);\r\n    return pluck(map(obj, function(value, key, list) {\r\n      return {\r\n        value: value,\r\n        index: index++,\r\n        criteria: iteratee(value, key, list)\r\n      };\r\n    }).sort(function(left, right) {\r\n      var a = left.criteria;\r\n      var b = right.criteria;\r\n      if (a !== b) {\r\n        if (a > b || a === void 0) return 1;\r\n        if (a < b || b === void 0) return -1;\r\n      }\r\n      return left.index - right.index;\r\n    }), 'value');\r\n  }\r\n\r\n  // An internal function used for aggregate \"group by\" operations.\r\n  function group(behavior, partition) {\r\n    return function(obj, iteratee, context) {\r\n      var result = partition ? [[], []] : {};\r\n      iteratee = cb(iteratee, context);\r\n      each(obj, function(value, index) {\r\n        var key = iteratee(value, index, obj);\r\n        behavior(result, value, key);\r\n      });\r\n      return result;\r\n    };\r\n  }\r\n\r\n  // Groups the object's values by a criterion. Pass either a string attribute\r\n  // to group by, or a function that returns the criterion.\r\n  var groupBy = group(function(result, value, key) {\r\n    if (has$1(result, key)) result[key].push(value); else result[key] = [value];\r\n  });\r\n\r\n  // Indexes the object's values by a criterion, similar to `_.groupBy`, but for\r\n  // when you know that your index values will be unique.\r\n  var indexBy = group(function(result, value, key) {\r\n    result[key] = value;\r\n  });\r\n\r\n  // Counts instances of an object that group by a certain criterion. Pass\r\n  // either a string attribute to count by, or a function that returns the\r\n  // criterion.\r\n  var countBy = group(function(result, value, key) {\r\n    if (has$1(result, key)) result[key]++; else result[key] = 1;\r\n  });\r\n\r\n  // Split a collection into two arrays: one whose elements all pass the given\r\n  // truth test, and one whose elements all do not pass the truth test.\r\n  var partition = group(function(result, value, pass) {\r\n    result[pass ? 0 : 1].push(value);\r\n  }, true);\r\n\r\n  // Return the number of elements in a collection.\r\n  function size(obj) {\r\n    if (obj == null) return 0;\r\n    return isArrayLike(obj) ? obj.length : keys(obj).length;\r\n  }\r\n\r\n  // Internal `_.pick` helper function to determine whether `key` is an enumerable\r\n  // property name of `obj`.\r\n  function keyInObj(value, key, obj) {\r\n    return key in obj;\r\n  }\r\n\r\n  // Return a copy of the object only containing the allowed properties.\r\n  var pick = restArguments(function(obj, keys) {\r\n    var result = {}, iteratee = keys[0];\r\n    if (obj == null) return result;\r\n    if (isFunction$1(iteratee)) {\r\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\r\n      keys = allKeys(obj);\r\n    } else {\r\n      iteratee = keyInObj;\r\n      keys = flatten$1(keys, false, false);\r\n      obj = Object(obj);\r\n    }\r\n    for (var i = 0, length = keys.length; i < length; i++) {\r\n      var key = keys[i];\r\n      var value = obj[key];\r\n      if (iteratee(value, key, obj)) result[key] = value;\r\n    }\r\n    return result;\r\n  });\r\n\r\n  // Return a copy of the object without the disallowed properties.\r\n  var omit = restArguments(function(obj, keys) {\r\n    var iteratee = keys[0], context;\r\n    if (isFunction$1(iteratee)) {\r\n      iteratee = negate(iteratee);\r\n      if (keys.length > 1) context = keys[1];\r\n    } else {\r\n      keys = map(flatten$1(keys, false, false), String);\r\n      iteratee = function(value, key) {\r\n        return !contains(keys, key);\r\n      };\r\n    }\r\n    return pick(obj, iteratee, context);\r\n  });\r\n\r\n  // Returns everything but the last entry of the array. Especially useful on\r\n  // the arguments object. Passing **n** will return all the values in\r\n  // the array, excluding the last N.\r\n  function initial(array, n, guard) {\r\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\r\n  }\r\n\r\n  // Get the first element of an array. Passing **n** will return the first N\r\n  // values in the array. The **guard** check allows it to work with `_.map`.\r\n  function first(array, n, guard) {\r\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\r\n    if (n == null || guard) return array[0];\r\n    return initial(array, array.length - n);\r\n  }\r\n\r\n  // Returns everything but the first entry of the `array`. Especially useful on\r\n  // the `arguments` object. Passing an **n** will return the rest N values in the\r\n  // `array`.\r\n  function rest(array, n, guard) {\r\n    return slice.call(array, n == null || guard ? 1 : n);\r\n  }\r\n\r\n  // Get the last element of an array. Passing **n** will return the last N\r\n  // values in the array.\r\n  function last(array, n, guard) {\r\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\r\n    if (n == null || guard) return array[array.length - 1];\r\n    return rest(array, Math.max(0, array.length - n));\r\n  }\r\n\r\n  // Trim out all falsy values from an array.\r\n  function compact(array) {\r\n    return filter(array, Boolean);\r\n  }\r\n\r\n  // Flatten out an array, either recursively (by default), or up to `depth`.\r\n  // Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.\r\n  function flatten(array, depth) {\r\n    return flatten$1(array, depth, false);\r\n  }\r\n\r\n  // Take the difference between one array and a number of other arrays.\r\n  // Only the elements present in just the first array will remain.\r\n  var difference = restArguments(function(array, rest) {\r\n    rest = flatten$1(rest, true, true);\r\n    return filter(array, function(value){\r\n      return !contains(rest, value);\r\n    });\r\n  });\r\n\r\n  // Return a version of the array that does not contain the specified value(s).\r\n  var without = restArguments(function(array, otherArrays) {\r\n    return difference(array, otherArrays);\r\n  });\r\n\r\n  // Produce a duplicate-free version of the array. If the array has already\r\n  // been sorted, you have the option of using a faster algorithm.\r\n  // The faster algorithm will not work with an iteratee if the iteratee\r\n  // is not a one-to-one function, so providing an iteratee will disable\r\n  // the faster algorithm.\r\n  function uniq(array, isSorted, iteratee, context) {\r\n    if (!isBoolean(isSorted)) {\r\n      context = iteratee;\r\n      iteratee = isSorted;\r\n      isSorted = false;\r\n    }\r\n    if (iteratee != null) iteratee = cb(iteratee, context);\r\n    var result = [];\r\n    var seen = [];\r\n    for (var i = 0, length = getLength(array); i < length; i++) {\r\n      var value = array[i],\r\n          computed = iteratee ? iteratee(value, i, array) : value;\r\n      if (isSorted && !iteratee) {\r\n        if (!i || seen !== computed) result.push(value);\r\n        seen = computed;\r\n      } else if (iteratee) {\r\n        if (!contains(seen, computed)) {\r\n          seen.push(computed);\r\n          result.push(value);\r\n        }\r\n      } else if (!contains(result, value)) {\r\n        result.push(value);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Produce an array that contains the union: each distinct element from all of\r\n  // the passed-in arrays.\r\n  var union = restArguments(function(arrays) {\r\n    return uniq(flatten$1(arrays, true, true));\r\n  });\r\n\r\n  // Produce an array that contains every item shared between all the\r\n  // passed-in arrays.\r\n  function intersection(array) {\r\n    var result = [];\r\n    var argsLength = arguments.length;\r\n    for (var i = 0, length = getLength(array); i < length; i++) {\r\n      var item = array[i];\r\n      if (contains(result, item)) continue;\r\n      var j;\r\n      for (j = 1; j < argsLength; j++) {\r\n        if (!contains(arguments[j], item)) break;\r\n      }\r\n      if (j === argsLength) result.push(item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Complement of zip. Unzip accepts an array of arrays and groups\r\n  // each array's elements on shared indices.\r\n  function unzip(array) {\r\n    var length = (array && max(array, getLength).length) || 0;\r\n    var result = Array(length);\r\n\r\n    for (var index = 0; index < length; index++) {\r\n      result[index] = pluck(array, index);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Zip together multiple lists into a single array -- elements that share\r\n  // an index go together.\r\n  var zip = restArguments(unzip);\r\n\r\n  // Converts lists into objects. Pass either a single array of `[key, value]`\r\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\r\n  // the corresponding values. Passing by pairs is the reverse of `_.pairs`.\r\n  function object(list, values) {\r\n    var result = {};\r\n    for (var i = 0, length = getLength(list); i < length; i++) {\r\n      if (values) {\r\n        result[list[i]] = values[i];\r\n      } else {\r\n        result[list[i][0]] = list[i][1];\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Generate an integer Array containing an arithmetic progression. A port of\r\n  // the native Python `range()` function. See\r\n  // [the Python documentation](https://docs.python.org/library/functions.html#range).\r\n  function range(start, stop, step) {\r\n    if (stop == null) {\r\n      stop = start || 0;\r\n      start = 0;\r\n    }\r\n    if (!step) {\r\n      step = stop < start ? -1 : 1;\r\n    }\r\n\r\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\r\n    var range = Array(length);\r\n\r\n    for (var idx = 0; idx < length; idx++, start += step) {\r\n      range[idx] = start;\r\n    }\r\n\r\n    return range;\r\n  }\r\n\r\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\r\n  // items.\r\n  function chunk(array, count) {\r\n    if (count == null || count < 1) return [];\r\n    var result = [];\r\n    var i = 0, length = array.length;\r\n    while (i < length) {\r\n      result.push(slice.call(array, i, i += count));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Helper function to continue chaining intermediate results.\r\n  function chainResult(instance, obj) {\r\n    return instance._chain ? _$1(obj).chain() : obj;\r\n  }\r\n\r\n  // Add your own custom functions to the Underscore object.\r\n  function mixin(obj) {\r\n    each(functions(obj), function(name) {\r\n      var func = _$1[name] = obj[name];\r\n      _$1.prototype[name] = function() {\r\n        var args = [this._wrapped];\r\n        push.apply(args, arguments);\r\n        return chainResult(this, func.apply(_$1, args));\r\n      };\r\n    });\r\n    return _$1;\r\n  }\r\n\r\n  // Add all mutator `Array` functions to the wrapper.\r\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\r\n    var method = ArrayProto[name];\r\n    _$1.prototype[name] = function() {\r\n      var obj = this._wrapped;\r\n      if (obj != null) {\r\n        method.apply(obj, arguments);\r\n        if ((name === 'shift' || name === 'splice') && obj.length === 0) {\r\n          delete obj[0];\r\n        }\r\n      }\r\n      return chainResult(this, obj);\r\n    };\r\n  });\r\n\r\n  // Add all accessor `Array` functions to the wrapper.\r\n  each(['concat', 'join', 'slice'], function(name) {\r\n    var method = ArrayProto[name];\r\n    _$1.prototype[name] = function() {\r\n      var obj = this._wrapped;\r\n      if (obj != null) obj = method.apply(obj, arguments);\r\n      return chainResult(this, obj);\r\n    };\r\n  });\r\n\r\n  // Named Exports\r\n\r\n  var allExports = {\r\n    __proto__: null,\r\n    VERSION: VERSION,\r\n    restArguments: restArguments,\r\n    isObject: isObject,\r\n    isNull: isNull,\r\n    isUndefined: isUndefined,\r\n    isBoolean: isBoolean,\r\n    isElement: isElement,\r\n    isString: isString,\r\n    isNumber: isNumber,\r\n    isDate: isDate,\r\n    isRegExp: isRegExp,\r\n    isError: isError,\r\n    isSymbol: isSymbol,\r\n    isArrayBuffer: isArrayBuffer,\r\n    isDataView: isDataView$1,\r\n    isArray: isArray,\r\n    isFunction: isFunction$1,\r\n    isArguments: isArguments$1,\r\n    isFinite: isFinite$1,\r\n    isNaN: isNaN$1,\r\n    isTypedArray: isTypedArray$1,\r\n    isEmpty: isEmpty,\r\n    isMatch: isMatch,\r\n    isEqual: isEqual,\r\n    isMap: isMap,\r\n    isWeakMap: isWeakMap,\r\n    isSet: isSet,\r\n    isWeakSet: isWeakSet,\r\n    keys: keys,\r\n    allKeys: allKeys,\r\n    values: values,\r\n    pairs: pairs,\r\n    invert: invert,\r\n    functions: functions,\r\n    methods: functions,\r\n    extend: extend,\r\n    extendOwn: extendOwn,\r\n    assign: extendOwn,\r\n    defaults: defaults,\r\n    create: create,\r\n    clone: clone,\r\n    tap: tap,\r\n    get: get,\r\n    has: has,\r\n    mapObject: mapObject,\r\n    identity: identity,\r\n    constant: constant,\r\n    noop: noop,\r\n    toPath: toPath$1,\r\n    property: property,\r\n    propertyOf: propertyOf,\r\n    matcher: matcher,\r\n    matches: matcher,\r\n    times: times,\r\n    random: random,\r\n    now: now,\r\n    escape: _escape,\r\n    unescape: _unescape,\r\n    templateSettings: templateSettings,\r\n    template: template,\r\n    result: result,\r\n    uniqueId: uniqueId,\r\n    chain: chain,\r\n    iteratee: iteratee,\r\n    partial: partial,\r\n    bind: bind,\r\n    bindAll: bindAll,\r\n    memoize: memoize,\r\n    delay: delay,\r\n    defer: defer,\r\n    throttle: throttle,\r\n    debounce: debounce,\r\n    wrap: wrap,\r\n    negate: negate,\r\n    compose: compose,\r\n    after: after,\r\n    before: before,\r\n    once: once,\r\n    findKey: findKey,\r\n    findIndex: findIndex,\r\n    findLastIndex: findLastIndex,\r\n    sortedIndex: sortedIndex,\r\n    indexOf: indexOf,\r\n    lastIndexOf: lastIndexOf,\r\n    find: find,\r\n    detect: find,\r\n    findWhere: findWhere,\r\n    each: each,\r\n    forEach: each,\r\n    map: map,\r\n    collect: map,\r\n    reduce: reduce,\r\n    foldl: reduce,\r\n    inject: reduce,\r\n    reduceRight: reduceRight,\r\n    foldr: reduceRight,\r\n    filter: filter,\r\n    select: filter,\r\n    reject: reject,\r\n    every: every,\r\n    all: every,\r\n    some: some,\r\n    any: some,\r\n    contains: contains,\r\n    includes: contains,\r\n    include: contains,\r\n    invoke: invoke,\r\n    pluck: pluck,\r\n    where: where,\r\n    max: max,\r\n    min: min,\r\n    shuffle: shuffle,\r\n    sample: sample,\r\n    sortBy: sortBy,\r\n    groupBy: groupBy,\r\n    indexBy: indexBy,\r\n    countBy: countBy,\r\n    partition: partition,\r\n    toArray: toArray,\r\n    size: size,\r\n    pick: pick,\r\n    omit: omit,\r\n    first: first,\r\n    head: first,\r\n    take: first,\r\n    initial: initial,\r\n    last: last,\r\n    rest: rest,\r\n    tail: rest,\r\n    drop: rest,\r\n    compact: compact,\r\n    flatten: flatten,\r\n    without: without,\r\n    uniq: uniq,\r\n    unique: uniq,\r\n    union: union,\r\n    intersection: intersection,\r\n    difference: difference,\r\n    unzip: unzip,\r\n    transpose: unzip,\r\n    zip: zip,\r\n    object: object,\r\n    range: range,\r\n    chunk: chunk,\r\n    mixin: mixin,\r\n    'default': _$1\r\n  };\r\n\r\n  // Default Export\r\n\r\n  // Add all of the Underscore functions to the wrapper object.\r\n  var _ = mixin(allExports);\r\n  // Legacy Node.js API.\r\n  _._ = _;\r\n\r\n  return _;\r\n\r\n})));\r\n//# sourceMappingURL=underscore-umd.js.map\r\n"]}